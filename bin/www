#!/usr/bin/env node

/**
 * Module dependencies.
 */
const logger = require('../utils/logger')(__filename)
const app = require('../app');
const debug = require('debug')('warframe-info-api:server');
const http = require('http');
const https = require('https');
const fs = require('fs');
const myConfig = require('../config/myConfig');

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * Create HTTP server.
 */
const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * 启用Https
 */

if(myConfig.https){
  // Configuare https
  const httpsOption = {
    key : fs.readFileSync("/home/key/1600598_zhshy.top.key"),
    cert: fs.readFileSync("/home/key/1600598_zhshy.top.pem")
  };
  const https_server = https.createServer(httpsOption, app);
  https_server.listen(443);
  https_server.on('error', onError);
  https_server.on('listening', onListening);
}
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
  debug('Listening on ' + bind);

  process.on('unhandledRejection', (reason, p) => {
    logger.error(`Unhandled Rejection :${reason} , at: Promise `);
    console.log(p)
    // application specific logging, throwing an error, or other logic here
  });
}
